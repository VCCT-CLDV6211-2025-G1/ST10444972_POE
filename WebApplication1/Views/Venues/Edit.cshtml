@model WebApplication1.Models.Venue
@using WebApplication1.Models

@{
    ViewData["Title"] = "Edit Venue";
}

<h1>Edit Venue</h1>

<p class="text-muted">Update venue information</p>
<hr />

<!-- Image Cropper Modal -->
<div class="modal fade" id="imageCropperModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Crop Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <img id="cropperImage" src="" style="max-width: 100%;">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="cropButton">Crop & Save</button>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-4">
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                <ul>
                    @foreach (var modelState in ViewData.ModelState.Values)
                    {
                        foreach (var error in modelState.Errors)
                        {
                            <li>@error.ErrorMessage</li>
                        }
                    }
                </ul>
            </div>
        }
        <form asp-action="Edit" enctype="multipart/form-data" id="editVenueForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="VenueId" />
            <input type="hidden" asp-for="ImageUrl" />
            <div class="form-group">
                <label asp-for="VenueName" class="control-label"></label>
                <input asp-for="VenueName" class="form-control" />
                <span asp-validation-for="VenueName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Location" class="control-label"></label>
                <input asp-for="Location" class="form-control" />
                <span asp-validation-for="Location" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Capacity" class="control-label"></label>
                <input asp-for="Capacity" class="form-control" />
                <span asp-validation-for="Capacity" class="text-danger"></span>
            </div>
            <div class="form-group">
                @if (!string.IsNullOrEmpty(Model.ImageUrl))
                {
                    <div class="mb-2">
                        <img src="@Model.ImageUrl" alt="Current venue image" style="max-width: 200px;" class="img-thumbnail" id="currentImage" />
                    </div>
                }
                <label asp-for="ImageFile" class="control-label">Change Venue Image</label>
                <input asp-for="ImageFile" class="form-control" type="file" accept="image/*" id="imageInput" />
                <span asp-validation-for="ImageFile" class="text-danger"></span>
                <div id="imagePreview" class="mt-2" style="display: none;">
                    <img src="" alt="New image preview" style="max-width: 200px;" class="img-thumbnail" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="Status" class="control-label"></label>
                <select asp-for="Status" class="form-select" asp-items="Html.GetEnumSelectList<VenueStatus>()"></select>
                <span asp-validation-for="Status" class="text-danger"></span>
            </div>
            <div class="form-group mt-4">
                <button type="submit" class="btn btn-primary" id="submitButton">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true" id="submitSpinner"></span>
                    Save Changes
                </button>
                <a asp-action="Index" class="btn btn-secondary">Back to List</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        let cropper;
        let croppedImageBlob;

        // Image selection and cropping
        document.getElementById('imageInput').addEventListener('change', function (e) {
            const file = e.target.files[0];
            if (file) {
                // Show the cropper modal
                const reader = new FileReader();
                reader.onload = function (e) {
                    const cropperImage = document.getElementById('cropperImage');
                    cropperImage.src = e.target.result;
                    
                    // Initialize cropper
                    if (cropper) {
                        cropper.destroy();
                    }
                    
                    cropper = new Cropper(cropperImage, {
                        aspectRatio: 16 / 9,
                        viewMode: 2,
                        responsive: true,
                        zoomable: true
                    });
                    
                    const modal = new bootstrap.Modal(document.getElementById('imageCropperModal'));
                    modal.show();
                }
                reader.readAsDataURL(file);
            }
        });

        // Handle crop button click
        document.getElementById('cropButton').addEventListener('click', async function () {
            if (cropper) {
                // Get cropped canvas
                const canvas = cropper.getCroppedCanvas({
                    width: 800,  // Max width
                    height: 600  // Max height
                });
                
                // Convert canvas to blob
                canvas.toBlob(function(blob) {
                    // Create a new File object
                    croppedImageBlob = new File([blob], 'cropped.jpg', { type: 'image/jpeg' });
                    
                    // Update preview
                    const preview = document.getElementById('imagePreview');
                    preview.style.display = 'block';
                    preview.querySelector('img').src = canvas.toDataURL();
                    
                    // Hide current image if it exists
                    const currentImage = document.getElementById('currentImage');
                    if (currentImage) {
                        currentImage.style.display = 'none';
                    }
                    
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('imageCropperModal'));
                    modal.hide();
                }, 'image/jpeg', 0.8); // JPEG at 80% quality
            }
        });

        // Form submission with loading indicator
        document.getElementById('editVenueForm').addEventListener('submit', function (e) {
            e.preventDefault(); // Prevent default form submission
            
            const submitButton = document.getElementById('submitButton');
            const spinner = document.getElementById('submitSpinner');
            const form = this;
            
            // Show loading state
            submitButton.disabled = true;
            spinner.classList.remove('d-none');

            // Replace the original file with the cropped one if a new image was selected
            if (croppedImageBlob) {
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(croppedImageBlob);
                document.getElementById('imageInput').files = dataTransfer.files;
            }
            
            // Submit the form
            form.submit();
        });
    </script>
}

@section Styles {
    <style>
        .img-container {
            max-height: 500px;
            overflow: hidden;
        }
        .cropper-container {
            max-width: 100%;
        }
    </style>
}
